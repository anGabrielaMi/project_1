//Formulario de registro
$(document).ready(function () {
    // Mostrar u ocultar el campo de c√≥digo seg√∫n el tipo de usuario
    $("#tipo-usuario").on("change", function () {
        const tipo = $(this).val();
        if (tipo === "admin") {
            $("#codigo-admin-container").removeClass("d-none");
        } else {
            $("#codigo-admin-container").addClass("d-none");
            $("#codigo-admin").val("");
        }
    });

    // Validaci√≥n visual del email en tiempo real
    $("#email-registro").on("input", function () {
        const valor = $(this).val();
        if (/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(valor)) {
            $(this).removeClass("is-invalid").addClass("is-valid");
        } else {
            $(this).removeClass("is-valid").addClass("is-invalid");
        }
    });

    // Procesar el formulario de registro
    $("#formulario-registro").on("submit", function (e) {
        e.preventDefault();

        const nombre = $("#nombre-registro").val().trim();
        const email = $("#email-registro").val().trim();
        const password = $("#password-registro").val().trim();
        const tipoUsuario = $("#tipo-usuario").val();
        const codigoAdmin = $("#codigo-admin").val().trim();
        const codigoEsperado = "FICCIONA2025";

        let errores = [];

        if (nombre === "") errores.push("El nombre es obligatorio.");
        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) errores.push("Correo inv√°lido.");
        if (password.length < 6) errores.push("La contrase√±a debe tener al menos 6 caracteres.");
        if (!tipoUsuario) errores.push("Debes seleccionar el tipo de usuario.");
        if (tipoUsuario === "admin" && codigoAdmin !== codigoEsperado) {
            errores.push("C√≥digo de administrador incorrecto.");
        }

        if (errores.length > 0) {
            alert("‚ö†Ô∏è " + errores.join("\n"));
            return;
        }

        const nuevoUsuario = {
            nombre,
            email,
            password,
            tipo: tipoUsuario
        };

        let usuarios = JSON.parse(localStorage.getItem("usuarios")) || [];
        usuarios.push(nuevoUsuario);
        localStorage.setItem("usuarios", JSON.stringify(usuarios));

        alert("Registro exitoso");
        this.reset();
        $("#codigo-admin-container").addClass("d-none");
        $("#formulario-registro .form-control").removeClass("is-valid is-invalid");
    });

    // Bot√≥n para limpiar el formulario
    $("#limpiar-registro").on("click", function () {
        $("#formulario-registro")[0].reset();
        $("#codigo-admin-container").addClass("d-none");
        $("#formulario-registro .form-control").removeClass("is-valid is-invalid");
    });
});

// Validaci√≥n al enviar formulario de sesi√≥n
$("#formulario-sesion").on("submit", function (e) {
    e.preventDefault();

    let nombre = $("#nombre-sesion").val().trim();
    let email = $("#email-sesion").val().trim();
    let password = $("#password-sesion").val().trim();
    let errores = [];

    if (nombre === "") errores.push("El nombre es obligatorio.");
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) errores.push("Correo inv√°lido.");
    if (password.length < 6) errores.push("La contrase√±a debe tener al menos 6 caracteres.");

    if (errores.length > 0) {
        alert(errores.join("\n"));
    } else {
        alert("Formulario de inicio de sesi√≥n enviado correctamente üéâ");
    }
});

// Validaci√≥n visual del email en tiempo real (sesi√≥n)
$("#email-sesion").on("input", function () {
    let valor = $(this).val();
    if (/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(valor)) {
        $(this).removeClass("is-invalid").addClass("is-valid");
    } else {
        $(this).removeClass("is-valid").addClass("is-invalid");
    }
});

// Bot√≥n para limpiar el formulario de sesi√≥n
$("#limpiar-sesion").on("click", function () {
    $("#formulario-sesion")[0].reset();
    $("#formulario-sesion .form-control").removeClass("is-valid is-invalid");
});


//Recuperar contrase√±a
$(document).ready(function () {
    // Validaci√≥n al enviar
    $("#formulario-recuperar").on("submit", function (e) {
        e.preventDefault();

        let email = $("#email-recuperar").val().trim();
        let errores = [];

        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
            errores.push("Correo inv√°lido.");
        }

        if (errores.length > 0) {
            alert(errores.join("\n"));
        } else {
            alert("Enlace de recuperaci√≥n enviado ‚úÖ");
            // Aqu√≠ podr√≠as hacer un AJAX si lo conectas a backend
        }
    });

    // Validaci√≥n visual del email
    $("#email-recuperar").on("input", function () {
        let valor = $(this).val();
        if (/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(valor)) {
            $(this).removeClass("is-invalid").addClass("is-valid");
        } else {
            $(this).removeClass("is-valid").addClass("is-invalid");
        }
    });

    // Bot√≥n para limpiar el formulario
    $("#limpiar-recuperar").on("click", function () {
        $("#formulario-recuperar")[0].reset();
        $("#formulario-recuperar .form-control").removeClass("is-valid is-invalid");
    });
});


//Modificar perfil

$(document).ready(function () {
    $("#formulario-perfil").on("submit", function (e) {
        e.preventDefault();

        let nombre = $("#nombre-perfil").val().trim();
        let email = $("#email-perfil").val().trim();
        let password = $("#password-perfil").val().trim();
        let errores = [];

        if (nombre === "") errores.push("El nombre es obligatorio.");
        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) errores.push("Correo inv√°lido.");
        if (password.length > 0 && password.length < 6) errores.push("La nueva contrase√±a debe tener al menos 6 caracteres.");

        if (errores.length > 0) {
            alert(errores.join("\n"));
        } else {
            alert("Perfil actualizado correctamente üéâ");

        }
    });

    $("#email-perfil").on("input", function () {
        let valor = $(this).val();
        if (/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(valor)) {
            $(this).removeClass("is-invalid").addClass("is-valid");
        } else {
            $(this).removeClass("is-valid").addClass("is-invalid");
        }
    });

    $("#limpiar-perfil").on("click", function () {
        $("#formulario-perfil")[0].reset();
        $("#formulario-perfil .form-control").removeClass("is-valid is-invalid");
    });
});

$("#imagen-perfil").on("change", function () {
    const archivo = this.files[0];
    if (archivo) {
        const lector = new FileReader();
        lector.onload = function (e) {
            $("#preview-imagen").attr("src", e.target.result).show();
        };
        lector.readAsDataURL(archivo);
    } else {
        $("#preview-imagen").hide();
    }
});


//Rese√±as

$(document).ready(function () {
    inicializarTodasLasRese√±asDeEjemplo();
    // Detectar categor√≠a desde el t√≠tulo
    const tituloPagina = document.title.toLowerCase();
    const categoria = tituloPagina.match(/matem√°ticas|medicina|ciencia|arte|literatura|historia/)?.[0] || "general";
    const claveStorage = "rese√±as_" + categoria;

    // Si estamos en una p√°gina de categor√≠a
    if ($("#form-rese√±a").length && $("#contenedor-rese√±as").length) {
        inicializarRese√±aEjemplo();
        mostrarRese√±as();

        $("#form-rese√±a").on("submit", function (e) {
            e.preventDefault();

            const titulo = $("#titulo").val().trim();
            const comentario = $("#comentario").val().trim();
            const estrellas = parseInt($("#estrellas").val(), 10);

            if (titulo && comentario && !isNaN(estrellas)) {
                const nuevaRese√±a = { titulo, comentario, estrellas };
                guardarRese√±a(nuevaRese√±a);
                mostrarRese√±as();
                this.reset();
            }
        });
    }

    // Si estamos en index.html, activar buscador
    if ($("#form-busqueda").length && $("#resultados-busqueda").length) {
        $("#form-busqueda").on("submit", function (e) {
            e.preventDefault();

            const termino = $("#input-busqueda").val()
                .toLowerCase()
                .normalize("NFD")
                .replace(/[\u0300-\u036f]/g, "")
                .trim();
            const contenedor = $("#resultados-busqueda");
            contenedor.empty();

            if (!termino) return;

            const categorias = ["matem√°ticas", "medicina", "ciencia", "arte", "literatura", "historia", "general"];
            let coincidencias = [];

            categorias.forEach((cat) => {
                const clave = "rese√±as_" + cat;
                const rese√±as = JSON.parse(localStorage.getItem(clave)) || [];

                rese√±as.forEach((r) => {
                    if (
                        r.titulo.toLowerCase().includes(termino) ||
                        r.comentario.toLowerCase().includes(termino)
                    ) {
                        coincidencias.push({ ...r, categoria: cat });
                    }
                });
            });

            if (coincidencias.length === 0) {
                contenedor.append(`
          <div class="alert alert-warning text-center" role="alert">
            No se encontraron coincidencias con "${termino}".
          </div>
        `);
                return;
            }

            contenedor.append(`<h4 class="mb-3">Resultados de b√∫squeda:</h4>`);

            coincidencias.forEach((r) => {
                contenedor.append(`
          <div class="card mb-3">
            <div class="card-body">
              <h5 class="card-title">${r.titulo}</h5>
              <p class="card-text">${r.comentario}</p>
              <p class="card-text"><small class="text-muted">Categor√≠a: ${r.categoria}</small></p>
              <div class="text-warning">${"‚òÖ".repeat(r.estrellas)}${"‚òÜ".repeat(5 - r.estrellas)}</div>
            </div>
          </div>
        `);
            });
        });
    }

    // Funciones compartidas
    function guardarRese√±a(rese√±a) {
        let rese√±as = JSON.parse(localStorage.getItem(claveStorage)) || [];
        rese√±as.push(rese√±a);
        localStorage.setItem(claveStorage, JSON.stringify(rese√±as));
    }

    function mostrarRese√±as() {
        const contenedor = $("#contenedor-rese√±as");
        contenedor.empty();

        const rese√±as = JSON.parse(localStorage.getItem(claveStorage)) || [];

        if (rese√±as.length === 0) {
            contenedor.append(`
        <div class="col-12 text-center text-muted">
          <p>A√∫n no hay rese√±as en esta categor√≠a.</p>
        </div>
      `);
            return;
        }

        rese√±as.forEach((r) => {
            const tarjeta = $(`
        <div class="col-md-6 mb-4">
          <div class="card h-100 aparecer">
            <div class="card-body">
              <h5 class="card-title">${r.titulo}</h5>
              <p class="card-text">${r.comentario}</p>
              <div class="text-warning">${"‚òÖ".repeat(r.estrellas)}${"‚òÜ".repeat(5 - r.estrellas)}</div>
            </div>
          </div>
        </div>
      `);
            contenedor.append(tarjeta);
        });
    }

    function inicializarRese√±aEjemplo() {
        const rese√±asExistentes = JSON.parse(localStorage.getItem(claveStorage)) || [];

        if (rese√±asExistentes.length === 0 && categoria === "matem√°ticas") {
            const rese√±aEjemplo = {
                titulo: "Fundamentos de √Ålgebra Lineal ‚Äì David Poole",
                comentario: "Un libro claro y progresivo que introduce los conceptos clave del √°lgebra lineal con ejemplos visuales y aplicaciones reales. Ideal para estudiantes que buscan entender m√°s all√° de la mec√°nica.",
                estrellas: 5
            };

            localStorage.setItem(claveStorage, JSON.stringify([rese√±aEjemplo]));
        }
    }
});


//Revisar rese√±as guardadas  desde el navegador
function mostrarRese√±asGuardadasEnConsola() {
    const categorias = ["matem√°ticas", "medicina", "ciencia", "arte", "literatura", "historia", "general"];

    categorias.forEach((cat) => {
        const clave = "rese√±as_" + cat;
        const rese√±as = JSON.parse(localStorage.getItem(clave)) || [];

        console.log(`üîç ${clave}:`);
        if (rese√±as.length === 0) {
            console.log("  (sin rese√±as)");
        } else {
            rese√±as.forEach((r, i) => {
                console.log(`  ${i + 1}. ${r.titulo} ‚Äî ${r.estrellas}‚òÖ`);
            });
        }
    });
}

//Forzar creaci√≥n de rese√±as de ejemplo
function inicializarTodasLasRese√±asDeEjemplo() {
    const ejemplos = {
        matem√°ticas: {
            titulo: "Fundamentos de √Ålgebra Lineal ‚Äì David Poole",
            comentario: "Un libro claro y progresivo que introduce los conceptos clave del √°lgebra lineal con ejemplos visuales y aplicaciones reales.",
            estrellas: 5
        },
        medicina: {
            titulo: "Anatom√≠a Humana ‚Äì Gray",
            comentario: "Cl√°sico imprescindible para estudiantes de medicina. Detallado, visual y riguroso.",
            estrellas: 4
        },
        ciencia: {
            titulo: "Breve historia del tiempo ‚Äì Stephen Hawking",
            comentario: "Una introducci√≥n accesible a los misterios del universo. Ideal para curiosos.",
            estrellas: 5
        },
        arte: {
            titulo: "Arte y belleza en la est√©tica medieval ‚Äì Umberto Eco‚Äì",
            comentario: "Es una lectura esencial para quienes buscan comprender el v√≠nculo entre arte, espiritualidad y filosof√≠a en la tradici√≥n occidental.",
            estrellas: 5
        },
        literatura: {
            titulo: "La hora de la estrella ‚Äì Clarice Lispector‚Äì",
            comentario: "Con una prosa introspectiva y po√©tica, Lispector transforma lo invisible en esencial",
            estrellas: 5
        },
        historia: {
            titulo: "Humanos ‚Äì Tom Phillips‚Äì",
            comentario: "Una cr√≥nica ingeniosa y provocadora sobre c√≥mo los humanos han tropezado con su propia genialidad,"
                + "dejando un rastro de errores tan absurdos como fascinantes.",
            estrellas: 5

        }// Otras rese√±as
    };

    Object.entries(ejemplos).forEach(([categoria, rese√±a]) => {
        const clave = "rese√±as_" + categoria;
        const existentes = JSON.parse(localStorage.getItem(clave)) || [];

        if (existentes.length === 0) {
            localStorage.setItem(clave, JSON.stringify([rese√±a]));
            console.log(`Rese√±a de ejemplo creada en ${clave}`);
        }
    });
}

//Prueba
// Simulaci√≥n: el usuario est√° logueado si existe 'usuarioActivo' en localStorage
const logueado = localStorage.getItem('usuarioActivo');

if (logueado) {
    // Habilitar campos
    document.querySelectorAll('#form-rese√±a [disabled]').forEach(el => {
        el.removeAttribute('disabled');
    });

    // Ocultar mensaje
    document.getElementById('mensaje-login').style.display = 'none';
}

//Bot√≥n cerrar sesi√≥n
document.getElementById('cerrar-sesion')?.addEventListener('click', () => {
    localStorage.removeItem('usuarioActivo');
    location.reload(); // Recarga la p√°gina para aplicar los cambios
});

//Comentarios rese√±as


function insertarRese√±a(titulo, comentario, estrellas, autor) {
    const contenedor = document.getElementById('contenedor-rese√±as');

    const rese√±aHTML = `
    <div class="col-md-6 mb-4">
      <div class="card h-100">
        <div class="card-body">
          <h5 class="card-title">${titulo}</h5>
          <p class="card-text">${comentario}</p>
          <p class="text-muted" style="font-size: 0.85rem;">Puntuaci√≥n: ${estrellas} ‚òÖ</p>
          <p class="text-muted" style="font-size: 0.85rem;">Rese√±a por: ${autor}</p>

          <div class="comentarios mt-3">
            <h6 style="font-family: 'Special Elite', monospace;">Escribe una respuesta a esta rese√±a</h6>
            <textarea class="form-control mt-2" rows="2" placeholder="Escribe una respuesta..." disabled></textarea>
            <button class="btn btn-sm btn-outline-secondary mt-1" disabled>Enviar respuesta</button>
          </div>
        </div>
      </div>
    </div>
  `;

    contenedor.insertAdjacentHTML('beforeend', rese√±aHTML);
}

function activarComentarios() {
    if (localStorage.getItem('usuarioActivo')) {
        document.querySelectorAll('.comentarios textarea').forEach(el => el.removeAttribute('disabled'));
        document.querySelectorAll('.comentarios button').forEach(el => el.removeAttribute('disabled'));
    }
}

function activarComentarios() {
    if (localStorage.getItem('usuarioActivo')) {
        document.querySelectorAll('.comentarios textarea').forEach(el => el.removeAttribute('disabled'));
        document.querySelectorAll('.comentarios button').forEach(el => {
            el.removeAttribute('disabled');

            // Agregar funcionalidad al bot√≥n
            el.addEventListener('click', () => {
                const respuesta = el.previousElementSibling.value.trim();
                if (respuesta) {
                    alert(`Respuesta enviada: ${respuesta}`);
                    el.previousElementSibling.value = ""; // Limpia el campo
                } else {
                    alert("Por favor escribe una respuesta antes de enviar.");
                }
            });
        });
    }
}

//Identificar autor de rese√±as
const autor = localStorage.getItem('usuarioActivo') || 'An√≥nimo';

// Mostrar en el formulario
const etiquetaAutor = document.getElementById('autor-rese√±a');
if (etiquetaAutor) {
    etiquetaAutor.textContent = `Rese√±a por: ${autor}`;
}

// Usar al publicar la rese√±a
document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('form-rese√±a');
  if (form) {
    form.addEventListener('submit', function(e) {
      e.preventDefault();

      const titulo = document.getElementById('titulo').value.trim();
      const comentario = document.getElementById('comentario').value.trim();
      const estrellas = document.getElementById('estrellas').value;
      const autor = localStorage.getItem('usuarioActivo') || 'An√≥nimo';

      insertarRese√±a(titulo, comentario, estrellas, autor);
      activarComentarios();
    });
  }
});